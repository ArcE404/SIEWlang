using SIEWlang.Core.Lexer;
namespace SIEWlang.Core.Parser;

// ***************************************************
// This code is autogenerated by the GenerateAst Tool.
// ***************************************************

public abstract class Stmt{
    public abstract T Accept<T>(IVisitor<T> visitor);

    public interface IVisitor<R>
    {
        R VisitBlockStmt(Block stmt);
        R VisitExpressionStmt(Expression stmt);
        R VisitPrintStmt(Print stmt);
        R VisitVarStmt(Var stmt);
    }

   public class Block : Stmt
   {
        public List<Stmt> Statements { get; }

        public Block(List<Stmt> Statements)
        {
            this.Statements = Statements;
        }

        public override T Accept<T>(IVisitor<T> visitor)
        {
            return visitor.VisitBlockStmt(this);
        }
   }

   public class Expression : Stmt
   {
        public Expr expression { get; }

        public Expression(Expr expression)
        {
            this.expression = expression;
        }

        public override T Accept<T>(IVisitor<T> visitor)
        {
            return visitor.VisitExpressionStmt(this);
        }
   }

   public class Print : Stmt
   {
        public Expr Expression { get; }

        public Print(Expr Expression)
        {
            this.Expression = Expression;
        }

        public override T Accept<T>(IVisitor<T> visitor)
        {
            return visitor.VisitPrintStmt(this);
        }
   }

   public class Var : Stmt
   {
        public Token Name { get; }
        public Expr Initializer { get; }

        public Var(Token Name, Expr Initializer)
        {
            this.Name = Name;
            this.Initializer = Initializer;
        }

        public override T Accept<T>(IVisitor<T> visitor)
        {
            return visitor.VisitVarStmt(this);
        }
   }

}
